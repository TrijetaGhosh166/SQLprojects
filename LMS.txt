- LMS Project
-- Table Creation Script: 
CREATE TABLE [dbo].[Subject]
(
	[SubjectID] [int] NOT NULL,
	[SubjectName] [varchar](64) NULL,
    CONSTRAINT [PK_Subject] PRIMARY KEY CLUSTERED ([SubjectID] ASC)
) 
GO
CREATE TABLE [dbo].[Department]
(
	[DeptID] [int] NOT NULL,
	[DeptName] [varchar](64) NOT NULL,
    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED ([DeptID] ASC)
) 
GO
CREATE TABLE [dbo].[BookDetails]
(
	[BookID] [int] NOT NULL,
	[BookName] [varchar](64) NOT NULL,
	[AuthorName] [varchar](64) NOT NULL,
	[BookSerialNumber] [varchar](64) NOT NULL,
	[SubjectID] [int] NOT NULL,
	[Publisher] [varchar](64) NOT NULL,
	[Price] [int] NULL,
 CONSTRAINT [PK_BookDetails] PRIMARY KEY CLUSTERED ([BookID] ASC)
) 
GO
ALTER TABLE [dbo].[BookDetails]  WITH CHECK 
ADD  CONSTRAINT [FK_BookDetails_subject_SubjectID] FOREIGN KEY([SubjectID])
REFERENCES [dbo].[Subject] ([SubjectID])
GO
CREATE TABLE [dbo].[BorrowerDetails]
(
	[BorrowerID] [int] NOT NULL,
	[BorrowerName] [varchar](64) NOT NULL,
	[BorrowerContact] [varchar](64) NOT NULL,
	[DeptID] [int] NOT NULL,
	[Address] [varchar](64) NOT NULL,
    CONSTRAINT [PK_BorrowerDetails] PRIMARY KEY CLUSTERED ([BorrowerID] ASC)
) 
GO
ALTER TABLE [dbo].[BorrowerDetails]  WITH CHECK 
ADD  CONSTRAINT [FK_Borrowerdetails_Department_DeptID] FOREIGN KEY([DeptID])
REFERENCES [dbo].[Department] ([DeptID])
GO
CREATE TABLE [dbo].[BookBorrowed]
(
	[BookBorrowedID] [int] NOT NULL,
	[BookID] [int] NOT NULL,
	[BorrowerID] [int] NOT NULL,
	[BorrowedOn] [datetime] NOT NULL,
	[DueDate] [datetime] NOT NULL,
	[NumberOfCopies] [int] NOT NULL,
	[ReturnStatus] [varchar](64) NOT NULL,
    CONSTRAINT [PK_BookBorrowed] PRIMARY KEY CLUSTERED ([BookBorrowedID] ASC)
)
 ON [PRIMARY]
GO
ALTER TABLE [dbo].[BookBorrowed]  WITH CHECK ADD  CONSTRAINT [FK_Bookborrowed_BookDetails_BookID] FOREIGN KEY([BookID])
REFERENCES [dbo].[BookDetails] ([BookID])
GO
ALTER TABLE [dbo].[BookBorrowed]  WITH CHECK ADD  CONSTRAINT [FK_Bookborrowed_Borrowerdetails_BorrowerID] FOREIGN KEY([BorrowerID])
REFERENCES [dbo].[BorrowerDetails] ([BorrowerID])
GO


-- create a report/view to see bookname, authorname, subjectname and price
-- we have to create a view and save our select statement in the view
-- so that librarian can simply call the view and see the report details

CREATE VIEW BookReport
AS
select bookname,authorname,subjectname, price 
from subject as s
inner join bookdetails as b 
on b.subjectid=s.subjectid


-- create a report/view to see Borrowername, BorrowerContact, DepartmentName and Address
-- we have to create a view and save our select statement in the view
-- so that librarian can simply call the view and see the report details
CREATE VIEW BorrowerReport
AS
select b.Borrowername, b.BorrowerContact, d.DeptName as DepartmentName, b.Address
from Department as d
inner join BorrowerDetails as b 
on d.DeptID=b.DeptID


-- create a report/view to see borrowd book details: BookName, BorrowerName, 
-- BorrowerContact, AuthorName, BorrowedOn, DueDate
-- we have to create a view and save our select statement in the view
-- so that librarian can simply call the view and see the report details

CREATE VIEW BorrowedBookReport
AS
select bd.BookName, br.BorrowerName, br.BorrowerContact, bd.AuthorName, bb.BorrowedOn, bb.DueDate 
from bookdetails as bd
INNER JOIN bookborrowed as bb ON bd.BookID=bb.BookID
INNER JOIN BorrowerDetails as br ON bb.BorrowerID = br.BorrowerID
WHERE bb.ReturnStatus = 'N'



-- 	Create a Stored Procedure to borrow a book (Add a entry to BookBorrowed table)
-- BookName, BorrowerName
CREATE PROCEDURE BorrowNewBook
@BookName Varchar(32),
@BorrowerName Varchar(32)
AS
BEGIN
	declare @bid int = NULL , @brid int = NULL, @bbid int = 1
	select @bbid = max(bookborrowedid)+1 from BookBorrowed
	IF NOT EXISTS (select * from BookDetails where BookName = @BookName)
	BEGIN
		Print 'Book does not exist in the library: ' + @BookName
	END
	ELSE
	BEGIN
		select @bid = BookID from BookDetails where BookName = @BookName
	END
	IF NOT EXISTS (select * from BorrowerDetails where BorrowerName = @BorrowerName)
	BEGIN
		Print 'Not a member of the library: ' + @BorrowerName
	END
	ELSE
	BEGIN
		select @brid = BorrowerID from BorrowerDetails where BorrowerName = @BorrowerName
	END
	IF (@bid IS NOT NULL) AND (@brid IS NOT NULL)
	BEGIN
		INSERT INTO BookBorrowed (BookBorrowedID, bookid, BorrowerID, BorrowedOn, DueDate, NumberOfCopies, ReturnStatus)
		Values(@bbid, @bid, @brid, getdate(), dateadd(day, 3, getdate()), 1, 'N')
	END
	else
	begin
		Print 'Validation error... Hence book can not be borrowed...'
	end
END



-- please write a procedure for returning a book
-- validate the borrower name, book name and find the book borrowed ID
-- If book submitted after due date, ask for penalty and update returnstatus
-- If book submitted before due date then no penalty and update returnstatus
create procedure ReturnBook
@BookName Varchar(32),
@BorrowerName Varchar(32)
AS
BEGIN
	declare @bid int = NULL , @brid int = NULL, @bbid int = 1, @duedate datetime
	select @bid = BookID from BookDetails where BookName = @BookName
	select @brid = BorrowerID from BorrowerDetails where BorrowerName = @BorrowerName
	select @bbid = BookBorrowedID from BookBorrowed where BookID = @bid AND BorrowerID = @brid
	select @duedate = DueDate from BookBorrowed where BookBorrowedID = @bbid

	if (@duedate<getdate())
	begin
		print 'Due date is over - applicable penalty' 
		update BookBorrowed set ReturnStatus = 'Y' where BookBorrowedID = @bbid
	end
	else
		begin
		print 'Returned within due date - No penalty' 
		update BookBorrowed set ReturnStatus = 'Y' where BookBorrowedID = @bbid
	end
END

-- exec ReturnBook 'Physics Basics', 'Radhika'


---Library Managment System

--CREATE DATABAE
CREATE DATABASE LMS_Project
--CREATE TABLE SUBJECT
CREATE TABLE Subject(

Subject_ID INT NOT NULL,
Subject_Name VARCHAR(64) NOT NULL,
CONSTRAINT PK_Subject PRIMARY KEY CLUSTERED ([Subject_ID]ASC)
)
GO
--SHOW TABLE
SELECT*FROM Subject



-- Delete existing rows
DELETE FROM Subjects;

-- Insert rows with rearranged SubjectID values
INSERT INTO Subjects (SubjectID, SubjectName)
VALUES
    (1, 'Programming Language'),
    (2, 'Algorithms'),
    (3, 'DSA'),
    (4, 'Computer architecture'),
    (5, 'Mathematics I'),
    (6, 'Digital Electronics'),
    (7, 'DBMS'),
    (8, 'Data Science'),
    (9, 'Operating System'),
    (10, 'OOPs'),
    (11, 'Neural Networking'),
    (12, 'System Programming'),
    (13, 'Analytical Skill Development-I'),
    (14, 'Fundamentals of PHP'),
    (15, 'Introduction to Embedded Systems'),
    (16, 'Introduction to Web Technology'),
    (17, 'Fundamental of Open Source Software-LINUX'),
    (18, 'Value and Ethics'),
    (19, 'Engineering Graphics and Drawing'),
    (20, 'Workshop Practice');

